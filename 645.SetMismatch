
// Time Complexity: O(n)  & Space Complexity: O(n)


class Solution {
    public int[] findErrorNums(int[] nums) {
        int result[] = new int[2];
       int cache[] = new int[nums.length+1];
        for(int i =0;i<nums.length;i++){
            if(cache[nums[i]] == 0 )
                cache[nums[i]]++;
            else{
                result[0] = nums[i];
            }
        }
       
        for(int i = 1;i<cache.length;i++ ){
            if(cache[i] == 0 ){
                result[1] = i;
                break;
            }
        }
        return result;
    }
}

--------------------------------------------------------------------------------------------------------------------------------


// Time Complexity: O(n) & Space Complexity: O(1)



class Solution {
    public int[] findErrorNums(int[] nums) {
        int dup = 0,miss = 0;
        int size = nums.length;
        for(int i =0;i<size;i++){
            if(nums[Math.abs(nums[i])-1]<0){
                dup = Math.abs(nums[i]);
            }else{
                nums[Math.abs(nums[i])-1]*=-1;
            }
        }
       for(int i = 0;i<size;i++){
           if(nums[i]>0){
               miss = i+1;
               break;
           }
       }
        
        return new int[]{dup,miss};
    }
}
